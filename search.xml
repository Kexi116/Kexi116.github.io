<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Update、LateUpdate、FixedUpdate比较.md</title>
    <url>/2021/08/09/Update%E3%80%81LateUpdate%E3%80%81FixedUpdate%E6%AF%94%E8%BE%83-md/</url>
    <content><![CDATA[<p><strong>Update、LateUpdate、FixedUpdate三种函数的比较</strong></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>今天在学习游戏开发的过程中遇到了一个很有意思的问题，就是在Update设置摄像机跟随时，每次运行时画面总是会产生抖动，学习后发现给摄像机更改位置要写在LateUpdate中而不是Update。趁此机会也记录下三个Update函数的区别。</p>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update()"></a><strong>Update()</strong></h2><p>Update()方法应该大家都很熟悉了，Update()方法在游戏运行的每一帧调用一次，比如你的游戏是30帧的，那么Update()方法一秒内就会调用30次。由于每个人的设备性能各不相同，因此Update()并不适合做物理相关的计算，比如你在Update()中实现实时向前方射击一粒子弹，那么不同帧率的设备上的每秒射击的子弹数是不同的。</p>
<h2 id="FixedUpdate"><a href="#FixedUpdate" class="headerlink" title="FixedUpdate()"></a>FixedUpdate()</h2><p>先看一段官方文档的描述</p>
<p><a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html">https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html</a></p>
<p><img src="/2021/08/09/Update%E3%80%81LateUpdate%E3%80%81FixedUpdate%E6%AF%94%E8%BE%83-md/image-20210809110219262.png" alt="image-20210809110219262"></p>
<p>FixedUpdate()，顾名思义，即每次以一个固定的间隔调用(默认是0.02s)，FixedUpdate()由于其是以固定间隔执行的，故很适合实现一些物理计算(因为要求每秒实现的结果相同)，比如在FixedUpdate()中向rigidbody施加力等。同时要注意到，调用FixedUpdate()的频率可能比Update()高或者低。当应用程序只有25帧时，FixedUpdate()将会每帧调用两次，而当应用程序有100帧时，一次FixedUpdate()可能会导致两次的帧渲染。</p>
<h2 id="LateUpdate"><a href="#LateUpdate" class="headerlink" title="LateUpdate()"></a><strong>LateUpdate()</strong></h2><p>同样先看一段文档描述</p>
<p><a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html">https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html</a></p>
<p><img src="/2021/08/09/Update%E3%80%81LateUpdate%E3%80%81FixedUpdate%E6%AF%94%E8%BE%83-md/image-20210809110836539.png" alt="image-20210809110836539"></p>
<p>LateUpdate()也是顾名思义，晚于Update()调用，即在应用程序运行过程中，LateUpdate()总是等到所有的Update()执行完毕后再执行。因此如果想处理一些等到Update()执行完毕后的事时，就可以使用LateUpdate()。比如摄像机位置的变换，如果将位置的变换写在Update()那么视角就会产生抖动现象，因为跟踪目标是在每一个Update()期间进行的变换，如果每一次Update()期间目标都在变换位置，那么自然摄像机会随着会产生抖动现象。</p>
<p><strong>同时，在网上搜集资料时我还发现控制动画的代码也要写在LateUpdate()，这里由于本人还未学习Unity里的动画，暂时算挖个坑等后面学了之后再再填吧。</strong></p>
<font size="3">参考资料：</font>

<font size="2">[1] https://www.codinblack.com/the-difference-between-update-fixedupdate-and-lateupdate/</font>

<font size="2">[2]https://cobesign.wang/index.php/zh-tw/learningnote/unitynotebook/item/15-update-lateupdate-fixedupdate</font>

<font size="2">[3]https://answers.unity.com/questions/10189/what-is-the-general-use-of-awake-start-update-fixe.html</font>

<font size="2">[4]https://answers.unity.com/questions/1384304/climb-animation-in-update-or-fixedupdate-or-lateup.html</font>

]]></content>
      <categories>
        <category>游戏开发学习</category>
        <category>unity学习笔记</category>
        <category>Update、LateUpdate、FixedUpdate比较</category>
      </categories>
      <tags>
        <tag>Update</tag>
        <tag>LateUpdate</tag>
        <tag>FixedUpdate</tag>
      </tags>
  </entry>
  <entry>
    <title>unity一周学习笔记</title>
    <url>/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>跟着油管上学习的塔防游戏，用到的一些unity内容的笔记</strong></p>
<span id="more"></span>
<font color="red">**注：文章内Unity版本：Unity2019.4.18f1c1**</font>

<h2 id="Unity操作部分"><a href="#Unity操作部分" class="headerlink" title="Unity操作部分"></a>Unity操作部分</h2><p><strong>1、Unity里将物体定位到眼前快捷键</strong> ：ctrl+alt+f<br><strong>2、Unity里快速找到物体位置快捷键</strong> ：shif+f<br><strong>3、unity里选中多个连续物体：</strong>鼠标先选中一个 物体，之后鼠标移动到要选中的连续物体的最后一个，同时按下按下 shift和左键。即可选中多个连续物体。<br><strong>4、选中父物体的所有子物体：</strong>选中父物体后同时按下shift+c</p>
<h2 id="C-知识部分"><a href="#C-知识部分" class="headerlink" title="C#知识部分"></a><strong>C#知识部分</strong></h2><h4 id="1、Unity-中Input-getAxis和Input-getAxisRaw的区别"><a href="#1、Unity-中Input-getAxis和Input-getAxisRaw的区别" class="headerlink" title="1、Unity 中Input.getAxis和Input.getAxisRaw的区别"></a><strong>1、Unity 中Input.getAxis和Input.getAxisRaw的区别</strong></h4><p>unity文档中两个的描述如下：</p>
<p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130170409021.png" alt="image-20220130170409021"></p>
<p>关于虚拟轴怎么查看：</p>
<p>unity编辑器左上角Edit-&gt;Project Settings-&gt;Input Manager即可查看到对应的名称</p>
<p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130171108856.png" alt="image-20220130171108856" style="zoom:80%;"></p>
<p>撰写脚本代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Update()</span><br><span class="line">&#123;</span><br><span class="line">    x = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">    y = Input.GetAxis(&quot;Vertical&quot;);</span><br><span class="line">    Debug.Log(x);</span><br><span class="line">    Debug.Log(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取对应的水平和竖直虚拟轴的输入</p>
<p>挂载到物体后运行查看结果如下：<br><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130170025791.png" alt="image-20220130170025791"></p>
<p>可以看到一开始数字是0，当按下方向键或者wasd后出现了对应的小数</p>
<p>更改上述脚本如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Update()</span><br><span class="line">&#123;</span><br><span class="line">    x = Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">    y = Input.GetAxisRaw(&quot;Vertical&quot;);</span><br><span class="line">    Debug.Log(x);</span><br><span class="line">    Debug.Log(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130171241204.png" alt="image-20220130171241204"> </p>
<p>可以看到两者的区别在于GetAxisRaw获取的虚拟轴的输入是没有平滑过渡的，即只有0，-1，1三个结果</p>
<p>而GetAxis获取的虚拟轴有平滑过渡，会输出小数。</p>
<h4 id="2-Mathf-floor，Mathf-Round和Mathf-Clamp"><a href="#2-Mathf-floor，Mathf-Round和Mathf-Clamp" class="headerlink" title="2.Mathf.floor，Mathf.Round和Mathf.Clamp"></a>2.Mathf.floor，Mathf.Round和Mathf.Clamp</h4><p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130172102390.png" alt="image-20220130172102390"> </p>
<p>返回小于或者等于f的最大整数</p>
<p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130172148016.png" alt="image-20220130172148016" style="zoom:100%;"></p>
<p>返回最接近f的整数</p>
<font color="blue">**这里需要注意，如果f是X.5，例如0.5,1.5,2.5**</font>

<font color="blue">***那么会返回最接近f的偶数***</font>

<font color="blue">***上述三个数的返回结果分别为0,2,2***</font>

<p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130172902715.png" alt="image-20220130172902715"></p>
<p>返回介于min和max之间的值，若value超出这个范围，则取上下界</p>
<h4 id="3-Invoke-和InvokeRepeating"><a href="#3-Invoke-和InvokeRepeating" class="headerlink" title="3.Invoke()和InvokeRepeating()"></a>3.Invoke()和InvokeRepeating()</h4><p>public void <strong>Invoke</strong>(string <strong>methodName</strong>, float <strong>time</strong>);</p>
<p>public void <strong>InvokeRepeating</strong>(string <strong>methodName</strong>, float <strong>time</strong>, float <strong>repeatRate</strong>)</p>
<p>两者都是经过time时间后调用methodName函数，一开始调用的函数不会收到Time.Scale影响</p>
<p><strong>InvokeRepeating()</strong>每隔repeatRate后会再次调用methodName函数，且调用该函数的时间会受到Time.scale的影响</p>
<p><strong>4.[Header(“”)]</strong></p>
<p>用于给字段添加人工分类</p>
<p>编写脚本如下：</p>
<p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220203214539400.png" alt="image-20220203214539400" style="zoom:75%;"></p>
<p>效果如下：</p>
<p><img src="/2022/01/31/unity%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220203214755096.png" alt="image-20220203214755096" style="zoom:67%;"></p>
]]></content>
      <categories>
        <category>游戏开发学习</category>
        <category>unity学习笔记</category>
        <category>一周学习笔记1</category>
      </categories>
  </entry>
  <entry>
    <title>旋转、平移、缩放顺序</title>
    <url>/2022/07/16/%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p><strong>谈谈自己的理解</strong></p>
<span id="more"></span>
<p><strong>前言：本文为本人学习图形学中记录所得，难免会有所错误。如有发现，请联系本人纠正。</strong></p>
<p><strong>一、序言</strong></p>
<p>旋转，平移，缩放作为3D图形中的基本操作，按照正确的顺序执行能够得到任何想要的效果，然而，若顺序不当，则会造成很多意想不到的结果，且难以发现出错位置。本文便是从矩阵的角度，以我个人所学，阐述旋转，平移，缩放执行顺序背后的原理。</p>
<p><strong>二、开始</strong></p>
<p><strong>1、平移和缩放</strong></p>
<p>我们先从两个最简单的变换开始。</p>
<p>我们知道，在图形学中图形的变换是通过矩阵来实现的，对应的<strong>平移</strong>和<strong>缩放</strong>矩阵，<strong>物体坐标</strong>如下：</p>
<script type="math/tex; mode=display">
\left
[\begin{matrix}
1 & 0 & 0 & Tx\\
0 & 1 & 0 & Ty\\
0 & 0 & 1 & Tz\\
0 & 0 & 0 & 1
\end{matrix}
\right]

\qquad
\left
[\begin{matrix}
Sx & 0 & 0 & 0\\
0 & Sy & 0 & 0\\
0 & 0 & Sz & 0\\
0 & 0 & 0   & 1
\end{matrix}
\right]
\qquad
\left
[\begin{matrix}
x\\
y\\
z\\
1 
\end{matrix}
\right]</script><p>我们记物体的原始坐标为Ps，结果坐标为Pd，平移矩阵为Mt，缩放矩阵为Ms，旋转矩阵为Mr。那么变换就有两种写法：</p>
<p><strong>（1）Mt <em> Ms </em> Ps</strong></p>
<p>即先进行缩放，在进行平移，让我们看看这样会发生什么，计算可得：</p>
<script type="math/tex; mode=display">
Pd =
\left
[\begin{matrix}
x*Sx + Tx\\
y*Sy+Ty\\
z*Sz+Tz\\
1 
\end{matrix}
\right]</script><p>可以看到，这个组合对物体进行了缩放，同时达到了平移的效果。</p>
<p><strong>（2）Ms <em> Mt </em> Ps</strong></p>
<p>即先进行平移，在进行缩放，计算可得：</p>
<script type="math/tex; mode=display">
Pd=
\left
[\begin
{matrix}
Sx*(x + Tx)\\
Sy*(y+Ty)\\
Sz*(z+Tz)\\
1 
\end
{matrix}\right]</script><p>可以看到先平移在缩放后，平移的向量也会被进行缩放</p>
<p><strong>2、平移和旋转</strong></p>
<p>我们以右手坐标系围绕z轴旋转θ°为例，还是跟上面一样，对应的平移矩阵和旋转矩阵如下：</p>
<script type="math/tex; mode=display">
\left
[\begin{matrix}
1 & 0 & 0 & Tx\\
0 & 1 & 0 & Ty\\
0 & 0 & 1 & Tz\\
0 & 0 & 0 & 1
\end{matrix}
\right]

\qquad
\left
[\begin{matrix}
cosθ & -sinθ & 0 & 0\\
sinθ & cosθ & 0 & 0\\
0 & 0 & 1 & 0\\
0 & 0 & 0   & 1
\end{matrix}
\right]</script><p>同样有两种写法：</p>
<p><strong>（1）Mt <em> Mr </em> Ps</strong></p>
<p>即先进行旋转，再进行平移，计算可得：</p>
<script type="math/tex; mode=display">
Pd =
\left
[\begin{matrix}
x*cosθ-y*sinθ+Tx\\
x*sinθ+y*cosθ+Ty &\\
z+Tz &\\
1 &
\end{matrix}
\right]</script><p><strong>（2）Mr <em> Mt </em> Ps</strong></p>
<p>先进行平移，在进行旋转，计算可得：</p>
<script type="math/tex; mode=display">
Pd =
\left
[\begin{matrix}
(x+Tx)*cosθ-(y+Ty)*sinθ\\
(x+Tx)*sinθ+(y+Ty)*cosθ\\
z+Tz &\\
1 &
\end{matrix}
\right]</script><p>假设过原点有一条直线(黄色)，我们希望将其变到另一个位置(棕色)，由图上可知，我们需要进行旋转和平移变换。</p>
<p><img src="/2022/07/16/%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E9%A1%BA%E5%BA%8F/image-20220716181243948.png" alt="image-20220716181243948"></p>
<p>我们假设一开始直线的两点分别为(1,1)和(-1,-1)，平移向量为(1,1,0,1)，沿z轴逆时针旋转90°</p>
<p>那么上面的两个矩阵计算结果分别为</p>
<p><strong>Mt <em> Mr </em> Ps</strong></p>
<p>(1,1)-&gt;(0,2)     (-1,-1)-&gt;(2,0)</p>
<p><strong>Mr <em> Mt </em> Ps</strong></p>
<p>(1,1)-&gt;(-2,2)    (-1,-1)-&gt;(0,0)</p>
<p>可以看到先旋转后平移是可以得到我们想要的结果的。</p>
<p><strong>那么为什么先平移后旋转得到的结果会有所不一样呢？</strong></p>
<p>我们不妨先把图画出来</p>
<p><img src="/2022/07/16/%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E9%A1%BA%E5%BA%8F/image-20220716181953076.png" alt="image-20220716181953076"></p>
<p>可以看到，旋转方向是转对了，但是平移位置却错了。</p>
<p>这其实就要牵涉到旋转矩阵的推导了，其实在推导旋转矩阵时，我们是用的绕坐标轴旋转的形式推导的，也就是说图像什么时候应用旋转矩阵，也就意味着图像什么时候绕坐标轴旋转。</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>变换</tag>
      </tags>
  </entry>
  <entry>
    <title>时间片轮转法</title>
    <url>/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><strong>作为学习中的记录，在此记下时间片轮转法的实现过程</strong></p>
<span id="more"></span>
<h1 id="一、算法简介"><a href="#一、算法简介" class="headerlink" title="一、算法简介"></a>一、算法简介</h1><p>时间片轮转法主要用于分时系统。其基本实现原理是每个进程被分配一个时间段(称为时间片)，当一个进程所拥有的的时间片结束后，仍然在运行时，该进程的CPU将被剥夺给另一个进程；而如果该进程在时间片期间内运行结束，则CPU当即进行切换。</p>
<p> <img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/1bb6b007188c3698f9a6c54cc7b531f.png" alt="Linux-UNIX系统编程手册上的解释"></p>
<center style="color:#C0C0C0">Linux-UNIX系统编程手册上的解释</center>

<h1 id="二、实例讲解"><a href="#二、实例讲解" class="headerlink" title="二、实例讲解"></a>二、实例讲解</h1><p>接下来通过一道例题来简单了解算法过程</p>
<p><strong>考虑5个进程P1,P2,P3,P4,P5,试描述采用时间片轮转调度算法的进程运行情况(假设时间片为1个单位)</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">进程</th>
<th style="text-align:center">创建时间</th>
<th style="text-align:center">运行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">P1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">P2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">P3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">P4</td>
<td style="text-align:center">6</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">P5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>t=0时刻，P1进程被创建并进入就绪队列，此时没有其他进程，P1处于就绪队列队首，获得时间片，并运行。</p>
</blockquote>
<p><strong>就绪队列：P1(3)(默认左边为队首，括号内为剩余运行时间)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719162851695.png" alt="image-20210719162851695"></p>
<blockquote>
<p>t=1时刻，此时就绪队列中任然只有P1，且没有其他进程，故此时P1又分到了时间片并运行。</p>
</blockquote>
<p><strong>就绪队列：P1(2)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719163149692.png" alt="image-20210719163149692"></p>
<blockquote>
<p>t=2时刻，即在P1运行结束之际，我们发现进程P2被创建并进入了就绪态，且P1为执行完毕。这里要提一点，就是关于进程的切换与进程的创建并进入就绪队列的时间比较。这里直接给结论，就是进程的切换往往涉及到保护现场和恢复现场等操作，因此进程之间的切换会比进程创建并进入就绪队列的耗时要多。因此在这里P2会排在就绪队首。</p>
</blockquote>
<p><strong>就绪队列：P2(6) P1(1)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719164905121.png" alt="image-20210719164905121"></p>
<blockquote>
<p>t=3时刻，P2运行结束且没有其他进程被创建，此时P2被插入到就绪队列末尾，接下来执行P1。</p>
</blockquote>
<p><strong>就绪队列：P1(1) P2(5)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719165347129.png" alt="image-20210719165347129"></p>
<blockquote>
<p>t=4时刻，即P1运行结束时，P3被创建，按照上面的说明，P3优先插入就绪队列末尾，此时P1的剩余运行时间为0，即P1运行结束，不在进入就绪队列。</p>
</blockquote>
<p><strong>就绪队列：P2(5) P3(4)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719165832248.png" alt="image-20210719165832248"></p>
<blockquote>
<p>t=5时刻，没有其他进程被创建，P2执行完毕后到就绪队列末尾</p>
</blockquote>
<p><strong>就绪队列：P3(4) P2(4)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719170037515.png" alt="image-20210719170037515"></p>
<blockquote>
<p>t=6时刻，进程P4被创建，先于P3插入到就绪队列末尾</p>
</blockquote>
<p><strong>就绪队列：P2(4) P4(5) P3(3)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719170313967.png" alt="image-20210719170313967"></p>
<blockquote>
<p>t=7时刻，没有进程被创建，正常执行</p>
</blockquote>
<p><strong>就绪队列：P4(5) P3(3) P2(3)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719170607246.png" alt="image-20210719170607246"></p>
<blockquote>
<p>t=8时刻，进程P5被创建并进入就绪队列，先于P4插入就绪队列末尾</p>
</blockquote>
<p><strong>就绪队列：P3(3) P2(3) P5(2) P4(4)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719170828567.png" alt="image-20210719170828567"></p>
<blockquote>
<p>t=9时刻，P2</p>
</blockquote>
<p><strong>就绪队列：P2(3) P5(2) P4(4) P3(2)</strong></p>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719171018327.png" alt="image-20210719171018327"></p>
<blockquote>
<p>t=10,11,12时刻分别运行进程P5,P4,P3</p>
</blockquote>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719171329391.png" alt="image-20210719171329391"></p>
<blockquote>
<p>t=13时刻</p>
</blockquote>
<p><strong>就绪队列：P2(2) P5(1) P4(3) P3(1)</strong></p>
<blockquote>
<p>t=13,14,15,16时刻分别运行进程P2,P5,P4,P3</p>
</blockquote>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719173837856.png" alt="image-20210719173837856"></p>
<blockquote>
<p>t=17时刻</p>
</blockquote>
<p><strong>就绪队列：P2(1) P4(2)</strong></p>
<blockquote>
<p>t=17,18,19分别运行进程P2,P4,P4，而后运行结束，没有其他进程进入。</p>
</blockquote>
<p><img src="/2021/07/19/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E6%B3%95%E4%BB%8B%E7%BB%8D/image-20210719174117273.png" alt="image-20210719174117273"></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>进程调度算法</category>
      </categories>
      <tags>
        <tag>时间片轮转法</tag>
      </tags>
  </entry>
  <entry>
    <title>视口矩阵应用之w的影响</title>
    <url>/2022/07/20/%E8%A7%86%E5%8F%A3%E7%9F%A9%E9%98%B5%E5%BA%94%E7%94%A8%E4%B9%8Bw%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
    <content><![CDATA[<p><strong>今天在做自己的软渲染器的时候遇到的问题</strong></p>
<span id="more"></span>
<p>一开始我自己实现的透视除法是将向量所有的值都除以w，即最后的w是1，然后应用视口变换矩阵将坐标变换到屏幕空间。即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v /= v.w;</span><br><span class="line">v.w = 1.f;</span><br></pre></td></tr></table></figure>
<p>后面当我在使用透视矫正时需要使用到原来坐标的深度，因为投影变换后的w=-z，因此w不能除，要留下来，于是乎代码变成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v.x /= v.w;</span><br><span class="line">v.y /= v.w;</span><br><span class="line">v.z /= v.w;</span><br></pre></td></tr></table></figure>
<p>后面再用这个坐标去乘以视口变换矩阵，这时候问题来了，视口变换如果我们照常写的话，其实就是将</p>
<p>x,y从 [-1,1]映射到[0,width],[0,height]，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v.x = 0.5 * width  * (v.x + 1.0);</span><br><span class="line">v.y = 0.5 * height * (v.y + 1.0);</span><br></pre></td></tr></table></figure>
<p>非常简单是吧</p>
<p>可是好死不死，我就想用视口变换矩阵，来装逼，众所周知，视口变换矩阵如下:</p>
<script type="math/tex; mode=display">
\left
[\begin{matrix}
w/2&0 &0&w/2\\
0&h/2&0&h/2\\
0&0&1&0\\
0&0&0&1 
\end{matrix}
\right]</script><p>看着没问题啊，带入正常的(x,y,z,1)也能计算出结果啊。</p>
<p>可是 要知道这个矩阵的最后一列不是全0! 是有值的!! 如果你的w值不是1的话，是会被影响到的。</p>
<p>举个例子 (x,y,z,2)，与上面的矩阵相乘可得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v.x = w/2*v.x+w = 0.5 * width  * (v.x + 2.0)</span><br><span class="line">v.y = h/2*v.y+h = 0.5 * height * (v.y + 2.0)</span><br></pre></td></tr></table></figure>
<p>发现了没有，后面的数字变了，也就是说变换坐标被改变了，所以说要想保留w的话，还是老老实实用数学公式吧，视口变换矩阵的前提是w等于1.</p>
<p>归根到底，这个问题还是我平时不老实，没有理解深入就使用的结果。希望大家以后也能注意吧</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>软渲染器</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一篇博客</title>
    <url>/2021/07/16/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>作为第一次创建博客的纪念，也作为今后督促我不断更新的证明吧</strong></p>
<span id="more"></span>
<blockquote>
<p>千辛万苦，终于搭建好了这个博客，记录下自己的第一次搭建(参考的b站上的视频和网上一些小伙伴，图源网络)</p>
</blockquote>
<p><img src="/2021/07/16/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/1.jpg" alt="(图源网络)"></p>
]]></content>
      <categories>
        <category>第一次的纪念</category>
      </categories>
  </entry>
</search>
